/* Exported from KeYmaera X v4.9.8 */

Theorem "dGL Example"

ProgramVariables
    Real c;
    Real r;
End.
Problem
    /* fill in dL formula here */
    < {{r:=*;}^@; {{c'=1} ++ {c'=-1}}}*> (c=r)
End.

Tactic "dGL Example   : Proof"
iterated('R=="<{{r:=*;}^@{{c'=1}++{c'=(-1)}}}*>c=r");
orR('R=="c=r|<{r:=*;}^@{{c'=1}++{c'=(-1)}}><{{r:=*;}^@{{c'=1}++{c'=(-1)}}}*>c=r");
composed('R=="<{r:=*;}^@{{c'=1}++{c'=(-1)}}><{{r:=*;}^@{{c'=1}++{c'=(-1)}}}*>c=r");
dualDirectd('R=="<{r:=*;}^@><{c'=1}++{c'=(-1)}><{{r:=*;}^@{{c'=1}++{c'=(-1)}}}*>c=r");
randomb('R=="[r:=*;]<{c'=1}++{c'=(-1)}><{{r:=*;}^@{{c'=1}++{c'=(-1)}}}*>c=r");
allR('R=="\forall r <{c'=1}++{c'=(-1)}><{{r:=*;}^@{{c'=1}++{c'=(-1)}}}*>c=r");
choiced('R=="<{c'=1}++{c'=(-1)}><{{r:=*;}^@{{c'=1}++{c'=(-1)}}}*>c=r");
cut("r < c|r>=c"); <(
  "Use":
    orL('L=="r < c|r>=c"); <(
      "r < c":
        orR('R=="<{c'=1}><{{r:=*;}^@{{c'=1}++{c'=(-1)}}}*>c=r|<{c'=(-1)}><{{r:=*;}^@{{c'=1}++{c'=(-1)}}}*>c=r");
        solve('R=="<{c'=(-1)}><{{r:=*;}^@{{c'=1}++{c'=(-1)}}}*>c=r");
        existsR("c_1-r", 'R=="\exists t_ (t_>=0&\forall c (c=-t_+c_1-><{{r:=*;}^@{{c'=1}++{c'=(-1)}}}*>c=r))");
        andR('R=="c_1-r>=0&\forall c (c=-(c_1-r)+c_1-><{{r:=*;}^@{{c'=1}++{c'=(-1)}}}*>c=r)"); <(
          "c_1-r>=0":
            auto using "r < c_1 :: c_1-r>=0 :: nil",
          "\forall c (c=-(c_1-r)+c_1-><{{r:=*;}^@{{c'=1}++{c'=(-1)}}}*>c=r)":
            allR('R=="\forall c (c=-(c_1-r)+c_1-><{{r:=*;}^@{{c'=1}++{c'=(-1)}}}*>c=r)");
            implyR('R=="c=-(c_1-r)+c_1-><{{r:=*;}^@{{c'=1}++{c'=(-1)}}}*>c=r");
            iterated('R=="<{{r:=*;}^@{{c'=1}++{c'=(-1)}}}*>c=r");
            orR('R=="c=r|<{r:=*;}^@{{c'=1}++{c'=(-1)}}><{{r:=*;}^@{{c'=1}++{c'=(-1)}}}*>c=r");
            auto using "r < c_1 :: c=-(c_1-r)+c_1 :: c=r :: nil"
        ),
      "r>=c":
        solve('R=="#<{c'=1}><{{r:=*;}^@{{c'=1}++{c'=(-1)}}}*>c=r#|<{c'=(-1)}><{{r:=*;}^@{{c'=1}++{c'=(-1)}}}*>c=r");
        orR('R=="\exists t_ (t_>=0&\forall c (c=t_+c_1-><{{r:=*;}^@{{c'=1}++{c'=(-1)}}}*>c=r))|<{c_1'=(-1)}><{{r:=*;}^@{{c_1'=1}++{c_1'=(-1)}}}*>c_1=r");
        existsR("r-c_1", 'R=="\exists t_ (t_>=0&\forall c (c=t_+c_1-><{{r:=*;}^@{{c'=1}++{c'=(-1)}}}*>c=r))");
        andR('R=="r-c_1>=0&\forall c (c=r-c_1+c_1-><{{r:=*;}^@{{c'=1}++{c'=(-1)}}}*>c=r)"); <(
          "r-c_1>=0":
            auto using "r>=c_1 :: r-c_1>=0 :: nil",
          "\forall c (c=r-c_1+c_1-><{{r:=*;}^@{{c'=1}++{c'=(-1)}}}*>c=r)":
            allR('R=="\forall c (c=r-c_1+c_1-><{{r:=*;}^@{{c'=1}++{c'=(-1)}}}*>c=r)");
            implyR('R=="c=r-c_1+c_1-><{{r:=*;}^@{{c'=1}++{c'=(-1)}}}*>c=r");
            iterated('R=="<{{r:=*;}^@{{c'=1}++{c'=(-1)}}}*>c=r");
            orR('R=="c=r|<{r:=*;}^@{{c'=1}++{c'=(-1)}}><{{r:=*;}^@{{c'=1}++{c'=(-1)}}}*>c=r");
            auto using "r>=c_1 :: c=r-c_1+c_1 :: c_1=r_0 :: c=r :: nil"
        )
    ),
  "Show":
    QE using "r < c|r>=c"
)
End.

End.